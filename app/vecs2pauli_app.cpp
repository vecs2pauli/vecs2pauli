#include "vecs2pauli.hpp"
#include <iostream>

void printResult(std::vector<std::complex<double>> vec1, std::vector<std::complex<double>> vec2, dd::PauliLIMCoset res, bool foundsol){
    std::cout << "Running vecs2pauli with vectors \n Source vector = ";
    dd::printVec(vec1);
    std::cout << "Target vector = ";
    dd::printVec(vec2);
    std::cout << "Result: the set of local-Pauli transformations from source to target vector is the set of matrices \"";
    dd::printAlpha(res.alpha);
    std::cout << "\" * ";
    std::cout << dd::LimEntry<>::to_string(&(res.LIM), dd::findNumQubits(vec1) - 1) << " * g, where g is an element of the group generated by {";
    if (int(res.stab.size() > 1)){
        for (int i = 0; i < int(res.stab.size()-1); i++){
            std::cout << dd::LimEntry<>::to_string(&(res.stab[i]), dd::findNumQubits(vec1) - 1) << ", ";
        }
    }
    if (int(res.stab.size() > 0)){
        std::cout << dd::LimEntry<>::to_string(&(res.stab[res.stab.size()-1]), dd::findNumQubits(vec1) - 1);
    }
    std::cout << "}" << std::endl << std::endl;
}



int main(int argc, char* argv[]){
    if (argc == 1){
        std::cout << "No command line arguments provided" << std::endl;
        return 0;
    }
    if (!dd::powerOfTwo((argc - 1)/ 2) || argc % 2 != 1){
        std::cout << "Incorrect number of arguments" << std::endl;
        return 0;
    }
    std::vector<std::complex<double>> vec1, vec2;
    for (int i = 1; i <= (argc - 1) / 2; i += 2){
        vec1.push_back(std::complex<double>(atof(argv[i]), atof(argv[i+1])));
    }
    for (int i = ((argc - 1) / 2) + 1; i < argc; i += 2){
        vec2.push_back(std::complex<double>(atof(argv[i]), atof(argv[i+1])));
    }
    dd::printVec(vec1);
    dd::printVec(vec2);
    bool foundsol = true;
    dd::PauliLIMCoset res = dd::vecs2Pauli(vec1, vec2, foundsol);
    printResult(vec1, vec2, res, foundsol);

    return 0;
}
